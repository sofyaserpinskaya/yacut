import random
import re
from datetime import datetime

from flask import url_for

from . import db
from settings import (
    ITERATION_NUMBER, ORIGINAL_LENGTH, SHORT_ID_ALLOWED_CHARACTERS,
    SHORT_ID_AUTOGENERATED_MAX_LENGTH, SHORT_ID_CHARACTER_SET,
    SHORT_ID_MAX_LENGTH
)


SHORT_ID_PATTERN = SHORT_ID_ALLOWED_CHARACTERS + f'{{1,{SHORT_ID_MAX_LENGTH}}}'

GENERATE_SHORT_ID_ERROR = 'Не удалось сгенерировать короткую ссылку'
NAME_EXISTS_ERROR = 'Имя "{}" уже занято.'
ORIGINAL_LENGTH_ERROR = 'Недопустимо длинная ссылка. Максимальная длина - {}.'
SHORT_NAME_ERROR = 'Указано недопустимое имя для короткой ссылки'


class GenerateShortIdError(Exception):
    pass


class URL_map(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    original = db.Column(db.String(ORIGINAL_LENGTH), nullable=False)
    short = db.Column(db.String(SHORT_ID_MAX_LENGTH), unique=True)
    timestamp = db.Column(db.DateTime, index=True, default=datetime.now)

    def from_dict(self, data):
        setattr(self, 'original', data['url'])
        setattr(self, 'short', data['custom_id'])

    def to_dict(self):
        return dict(
            url=self.original,
            short_link=url_for(
                'get_original_url', short_id=self.short, _external=True
            ),
        )

    @staticmethod
    def get_unique_short_id():
        for _ in range(ITERATION_NUMBER):
            short_id = ''.join(
                random.sample(
                    SHORT_ID_CHARACTER_SET, SHORT_ID_AUTOGENERATED_MAX_LENGTH
                )
            )
            if URL_map.query.filter_by(short=short_id).first() is None:
                return short_id
        raise GenerateShortIdError(GENERATE_SHORT_ID_ERROR)

    @staticmethod
    def get_url_map(short_id):
        return URL_map.query.filter_by(short=short_id).first()

    @staticmethod
    def create(original, short_id=None, validate=False):
        if validate:
            if len(original) > ORIGINAL_LENGTH:
                raise ValueError(ORIGINAL_LENGTH_ERROR.format(ORIGINAL_LENGTH))
            if short_id is None or short_id == '':
                short_id = URL_map.get_unique_short_id()
            if re.fullmatch(SHORT_ID_PATTERN, short_id) is None:
                raise ValueError(SHORT_NAME_ERROR)
            if URL_map.get_url_map(short_id) is not None:
                raise ValueError(NAME_EXISTS_ERROR.format(short_id))
        url_map = URL_map(
            original=original,
            short=short_id
        )
        db.session.add(url_map)
        db.session.commit()
        return url_map
